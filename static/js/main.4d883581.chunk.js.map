{"version":3,"sources":["componets/header.js","componets/square.js","componets/board.js","componets/status.js","componets/history.js","App.js","serviceWorker.js","index.js","assets/logo.svg"],"names":["StyledHeader","styled","header","Header","src","logo","className","alt","Button","button","props","win","Square","onClick","value","StyledBoard","div","Board","squaresList","winner","renderSquares","map","i","isWin","w","length","key","StyleStatus","Status","statusText","StyleHistory","History","App","useState","Array","fill","useSquaresList","setSquaresList","useIsNextPlay","setIsNextPlay","useThereWinner","setThereWinner","useStatus","setStatus","handeClick","squares","lines","a","b","c","calculateWinner","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.4d883581.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport logo from './../assets/logo.svg'\n\nconst StyledHeader = styled.header`\n  background-color: #282c34;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  box-shadow: 0 0 10px 1px;\n  height: 50px;\n  padding: 10px;\n  .header-logo {\n    height: 50px;\n    width: 50px;\n  }\n  .header-title {\n    color: white;\n    font-size: 1.1em;\n    margin: 0;\n  }\n  @media (prefers-reduced-motion: no-preference) {\n    .header-logo {\n      animation: header-logo-spin infinite 20s linear;\n    }\n  }\n  @keyframes header-logo-spin {\n    from {transform: rotate(0deg);}\n    to {transform: rotate(360deg);}\n  }\n` \n\nfunction Header(){\n  return(\n    <StyledHeader>\n      <img src={logo} className=\"header-logo\" alt=\"logo\" />\n      <h1 className=\"header-title\">React Tic Tac Toe challenge</h1>\n    </StyledHeader>\n  )\n}\n\nexport default Header","import React from 'react'\nimport styled from 'styled-components'\n\nconst Button = styled.button`\n  background: ${props => props.win ? \"#282c34\" : \"white\"};\n  border: 2px solid #282c34;\n  color: ${props => props.win ? \"white\" : \"#282c34\"};\n  font-size: 1.8em;\n  font-weight: bold;\n  line-height: 50px;\n  height: 50px;\n  margin-right: -2px;\n  margin-top: -2px;\n  padding: 0;\n  text-align: center;\n  width: 50px;\n  :focus {\n    outline: none;\n  }\n`\n\nfunction Square(props) {\n  return(\n    <Button\n      onClick={props.onClick}\n      win={props.win}>\n        {props.value}\n    </Button>\n  )\n}\n\nexport default Square","import React from 'react'\nimport Square from './square'\nimport styled from 'styled-components'\n\nconst StyledBoard = styled.div`\n  display: grid;\n  grid-template-columns: auto auto auto;\n  margin: 0 auto;\n  width: 144px;\n`\n\nfunction Board(props) {\n  \n  const {squaresList, onClick, winner} = props\n  const renderSquares = squaresList.map((value, i) => {\n\n    let isWin = false\n    for(var w = 0; w < winner.length; w++){\n      if(winner && winner[w] === i) {\n        isWin = true\n      }\n    }\n\n    return(\n      <Square \n        key={i}\n        value={value}\n        win={isWin}\n        onClick={() => onClick(i)}\n      />\n    )\n  })\n\n  return(\n    <StyledBoard>\n      {renderSquares}\n    </StyledBoard>\n  )\n}\n\nexport default Board\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyleStatus = styled.div`\n  font-size: 1.5em;\n  margin: 1.5em auto;\n  text-align: center;\n`\n\nfunction Status(props) {\n\n  return(\n    <StyleStatus>\n      {props.statusText}\n    </StyleStatus>\n  )\n}\n\nexport default Status","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyleHistory = styled.div`\n  text-align: center;\n  margin: 1.5em auto;\n`\n\nfunction History(props) {\n\n  return(\n    <StyleHistory>\n      Show history\n    </StyleHistory>\n  )\n}\n\nexport default History","import React, {useState} from 'react'\nimport Header from './componets/header'\nimport Board from './componets/board'\nimport Status from './componets/status'\nimport History from './componets/history'\n\nfunction App() {\n  \n  const [useSquaresList, setSquaresList] = useState(Array(9).fill(null))\n  const [useIsNextPlay, setIsNextPlay] = useState(true)\n  const [useThereWinner, setThereWinner] = useState(false)\n  const [useStatus, setStatus] = useState('Next Player: X')\n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] \n        && squares[a] === squares[b] \n        && squares[a] === squares[c]) {\n        return {\n          winner: squares[a],\n          lines: lines[i] \n        }\n      }\n    }\n    return null;\n  }\n\n  function handeClick(i) {\n    if(useThereWinner || useSquaresList[i]) return\n\n    const squares = useSquaresList\n    squares[i] = useIsNextPlay ? 'X' : 'O'\n    setSquaresList(squares)\n\n    const winner = calculateWinner(useSquaresList)\n    if(winner) {\n      setThereWinner(winner.lines)\n      setStatus('Winner: ' + winner.winner)\n    } else {\n      setStatus('Next Player: ' + (useIsNextPlay ? 'O' : 'X'))\n    }\n\n    setIsNextPlay(!useIsNextPlay)\n  }\n\n  return (\n    <>\n      <Header/>\n      <Status\n        statusText={useStatus}\n      />\n      <Board\n        squaresList={useSquaresList}\n        onClick={(i) => handeClick(i)}\n        winner={useThereWinner}\n      />\n      <History/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}